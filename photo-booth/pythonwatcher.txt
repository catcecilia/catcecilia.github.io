import os
import tkinter as tk
from PIL import Image, ImageTk
import qrcode
import cloudinary
import cloudinary.uploader
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import time
import threading

# ---------- Config ----------
WATCH_FOLDER = r"FILEPATH" 
DISPLAY_DURATION = 30  # seconds


# ---------- Cloudinary Signed Upload Config ----------
cloudinary.config(
    cloud_name='your_cloud_name',       # ← REPLACE
    api_key='your_api_key',             # ← REPLACE
    api_secret='your_api_secret'        # ← REPLACE
)

# ---------- Watchdog Event Handler ----------
class FolderWatcher(FileSystemEventHandler):
    def __init__(self, on_new_file):
        self.on_new_file = on_new_file
        self.seen_files = set()

    def handle_file_event(self, path):
        if path.lower().endswith(('.png', '.gif')):
            if path not in self.seen_files:
                self.seen_files.add(path)
                threading.Thread(target=self.on_new_file, args=(path,), daemon=True).start()

    def on_created(self, event):
        if not event.is_directory:
            self.handle_file_event(event.src_path)

    def on_moved(self, event):
        if not event.is_directory:
            self.handle_file_event(event.dest_path)

# ---------- QR Popup ----------
def show_qr_popup(url):
    def on_timer_end():
        root.destroy()

    root = tk.Tk()
    root.title("Scan to Download")
    root.geometry("350x420")
    root.configure(bg="white")

    # Always on Top
    root.attributes("-topmost", True)     # Always on top
    root.lift()                           # Bring to front
    root.focus_force()                    # Focus window (optional, helps with some window managers)

    # Message
    message_label = tk.Label(root, text="Scan QR code for a copy", font=("Arial", 14), bg="white")
    message_label.pack(pady=(10, 5))

    # QR Image
    qr = qrcode.make(url).resize((300, 300))
    qr_img = ImageTk.PhotoImage(qr)
    qr_label = tk.Label(root, image=qr_img, bg="white")
    qr_label.image = qr_img
    qr_label.pack(pady=(0, 5))

    # Countdown Label
    countdown_label = tk.Label(root, text="", font=("Arial", 12), bg="white")
    countdown_label.pack(pady=(0, 10))

    def update_countdown(seconds_left):
        if seconds_left <= 0:
            root.after(0, on_timer_end)
        else:
            countdown_label.config(text=f"QR closes in {seconds_left}s")
            root.after(1000, update_countdown, seconds_left - 1)

    update_countdown(DISPLAY_DURATION)
    root.mainloop()

# ---------- File Handler ----------
def handle_new_file(filepath):
    print(f"[+] Detected new file: {filepath}")

    if wait_until_file_is_ready(filepath):
        try:
            result = cloudinary.uploader.upload(filepath)
            url = result.get("secure_url")
            print(f"[✓] Uploaded to: {url}")
            show_qr_popup(url)
        except Exception as e:
            print("Upload failed:", e)
    else:
        print(f"[-] File {filepath} was not stable in time.")

def wait_until_file_is_ready(filepath, timeout=10, interval=0.5):
    previous_size = -1
    start_time = time.time()
    while time.time() - start_time < timeout:
        try:
            current_size = os.path.getsize(filepath)
            if current_size == previous_size:
                return True
            previous_size = current_size
        except OSError:
            pass
        time.sleep(interval)
    return False

# ---------- Main ----------
if __name__ == "__main__":
    print(f"[*] Watching folder: {WATCH_FOLDER}")
    event_handler = FolderWatcher(handle_new_file)
    observer = Observer()
    observer.schedule(event_handler, WATCH_FOLDER, recursive=False)
    observer.start()

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()
